Authentication 관련해서 SecurityContextPersistenceFilter 가 매우 중요한 역할을 한다.

* 중요한 배경지식
- SecurityContext 는 Authentication 객체를 저장한다.
- Session 에 저장되는 정보 중에는 SecurityContext 객체도 있다. 즉 현재 클라이언트와 서버 연결 세션이 인증된 적이 있는지 Session 객체에 저장하는 것이다.
    - Session 에 SecurityContext 를 저장함으로써 Request 와 Request 사이의 인증 정보가 유지되도록 한다.
- SecurityContextHolder 또한 SecurityContext 객체를 저장한다.
- Session 에 저장되는 SecurityContext 는 Request 와 Request 사이의 인증 정보를 유지하기 위함이고,
  SecurityContextHolder 에 SecurityContext 는 SecurityContextPersistenceFilter 에 의해 일시적으로 로드되는 것으로,
  이후 수 많은 필터와 메서드 들이 참조하고 변경하게 되며, Response 시점에(정확히는 SecurityContextPersistenceFilter 의 finally block 실행 시점)
  다시 Session 객체에 저장된다. (변경된 SecurityContext 가 저장되고, 추후 다른 Request 에서 다시 불러올 수 있도록)


SecurityContextPersistenceFilter 의 의의
TLDR: Request 를 받으면 SecurityContext 를 Session 으로부터 꺼내와서(세션으로부터 복구) 이후 Request 가 처리되는 동안 사용되게 하고,
    응답 시점에 변경된 SecurityContext 를 다시 Session 에 저장한다.
- SecurityContextPersistenceFilter 는 SecurityFilterChain 중 앞에서 두 세번째 정도에 위치하여,
  SecurityContext 를 Session 으로부터 꺼내어 SecurityContextHolder 에 저장해 놓는다.
- 이후 다른 Security Filter 들은 SecurityContextHolder 로부터 SecurityContext 를 받고 이 안의 Authentication 을 이용하거나 변경하거나 한다.
    - 즉, SecurityContextPersistenceFilter 이후로는 Session 으로부터 또 꺼내오지는 않고
      SecurityContextHolder 를 통해 SecurityContext, Authentication 객체를 공유한다.
      (Request 가 나머지 필터들과 비즈니스 로직들을 거치고 다시 SecurityContextPersistenceFilter 의 "finally" block 으로 돌아올 때까지
- SecurityContextPersistenceFilter 의 finally block 이 SecurityContextHolder 로부터 SecurityContext 를 얻고
  이를 Session 에 다시 저장한다. (즉, SecurityContext 변경점이 저장된다.) 그리고 SecurityContextHolder 에서 SecurityContext 를 클리어한다.


Session 으로부터 SecurityContext 를 받아올 수 있었다면 이미 인증 받은 세션이라는 뜻이고,
FilterSecurityInterceptor 에서 authentication 받은 것임이 입증이 된다.

Session 으로부터 SecurityContext 를 받아올 수 없었다면 SecurityContext 는 Authentication 객체가 없는 빈 객체로서 SecurityContextHolder 에 저장된다.
이후 UsernamePasswordAuthenticationFilter 등의 authentication filter 에서 인증이 되면
SecurityContextHolder 에 인증된 SecurityContext, Authentication 을 저장한다.

즉, Session 등과 같은 곳과의 통신은 SecurityContextPersistenceFilter 의 몫이고,
이후의 필터들은 SecurityContextHolder 를 통해 SecurityContext, Authentication 을 공유한다.

* 강의안 다음 페이지 참조하면 좋다.
P.19, 72, 73, 74
